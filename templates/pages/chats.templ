package pages

templ ChatPage() {
	@Speak()
	@TextChat()
}

templ Speak() {
	<script>
	    let speakws = new WebSocket("/speak/ws");
		speakws.binaryType = "arraybuffer";

		speakws.onopen = () => {
			console.log("WebSocket connected");
			startMicrophone();
		};

		speakws.onmessage = (e) => {
			if (e.data instanceof ArrayBuffer) {
				const blob = new Blob([e.data], { type: "audio/webm" });
				const url = URL.createObjectURL(blob);
				const audio = new Audio(url);
				audio.play();
			} else {
				console.warn("Unexpected msg type", e);
			}
		};

		speakws.onerror = (err) => console.error("WS error", err);

		async function startMicrophone() {
			try {
				const stream = await navigator.mediaDevices.getUserMedia({ audio: true });
				const mediaRecorder = new MediaRecorder(stream, { mimeType: "audio/webm" });

				mediaRecorder.ondataavailable = function (event) {
					if (event.data.size > 0 && speakws.readyState === WebSocket.OPEN) {
						speakws.send(event.data);
					}
				};

				mediaRecorder.onstop = function () {
					stream.getTracks().forEach(track => track.stop());
				};

				mediaRecorder.start(250); // Send audio in 250ms chunks
				console.log("Recording started");
			} catch (err) {
				console.error("Microphone error:", err);
			}
		}
	</script>
}

templ TextChat() {
	<script>
		let webtextws = new WebSocket("/web_text/ws");
		webtextws.binaryType = "arraybuffer";
		webtextws.onopen = () => {
		    console.log("WebSocket connected")
		}
		webtextws.onmessage = (e) => {
            const text = new TextDecoder("utf-8").decode(e.data);
			document.getElementById("textWebResponse").innerText = text;
		}
		webtextws.onerror = (err) => console.error("WS error", err)
		async function SendInput() {
		    const el = document.getElementById("textWeb")
			if (!el || el.value == "") {
			    console.error("no value")
				return
			}
			if (webtextws.readyState == WebSocket.OPEN) {
			    webtextws.send(el.value)
			} else {
			    console.error("WS NOT OPEN")
			}
		}
	</script>
	<div class="flex flex-col gap-2">
		<button onclick="SendInput()" class="border border-gray-100">Text</button>
		<textarea id="textWeb" rows="15" class="border border-gray-100"></textarea>
		response
		<textarea id="textWebResponse" rows="15" class="border border-gray-100"></textarea>
	</div>
}
